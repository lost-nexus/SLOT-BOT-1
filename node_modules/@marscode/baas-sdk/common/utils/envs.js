"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCredential = exports.getBaaSApiTimeout = exports.getBaaSServerHost = void 0;
const errors_1 = require("../errors/errors");
const codes_1 = require("../errors/codes");
function getBaaSServerHost() {
    return process.env.baas_host;
}
exports.getBaaSServerHost = getBaaSServerHost;
/**
 * 获取接口超时时间，单位为毫秒，默认值为 10000
 * @param baasApi
 */
function getBaaSApiTimeout(baasApi) {
    const timeoutStr = process.env.BaaSApiTimeout;
    let timeouts;
    if (timeoutStr) {
        try {
            timeouts = JSON.parse(timeoutStr);
        }
        catch (e) {
            console.warn(`parse BaaSApiTimeout failed, ${e.stack}`);
            return 0;
        }
    }
    if (timeouts && timeouts[baasApi] > 0) {
        return timeouts[baasApi];
    }
    return 0;
}
exports.getBaaSApiTimeout = getBaaSApiTimeout;
function getCredential(type, resourceID) {
    // 1.从环境变量里加载
    let credentials;
    try {
        credentials = JSON.parse(process.env.baas_resources);
    }
    catch (e) {
        throw new errors_1.SysError(`getCredential failed, err: ${e.stack}`);
    }
    // 2.遍历匹配
    for (let credential of credentials) {
        if (resourceID) {
            if (resourceID === credential.ResourceID) {
                return {
                    resourceID: credential.ResourceID,
                    secret: credential.Secret,
                    type: credential.Type,
                };
            }
        }
        else if (credential.Type === type) {
            return {
                resourceID: credential.ResourceID,
                secret: credential.Secret,
                type: credential.Type,
            };
        }
    }
    // 3.分情况报错
    if (resourceID) {
        throw new errors_1.BizError(codes_1.errCodeInvalid, { content: `resourceID (${resourceID}) is invalid` });
    }
    throw new errors_1.SysError(`cannot find file credential`);
}
exports.getCredential = getCredential;
//# sourceMappingURL=envs.js.map