"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Redis = void 0;
const envs_1 = require("../../common/utils/envs");
const ctx_1 = require("../../common/utils/ctx");
const request_1 = require("../request/request");
const utils_1 = require("../../common/utils/utils");
class Redis {
    constructor(credential) {
        this.credential = credential;
    }
    async invoke(f) {
        if (!this.credential) {
            this.credential = (0, envs_1.getCredential)("redis");
        }
        return await (0, ctx_1.getCtx)().run(async () => {
            const ctx = (0, ctx_1.getCtx)();
            ctx.credential = this.credential;
            const resp = await ctx.run(f);
            return JSON.parse(resp.JSONStr);
        });
    }
    async append(key, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'append',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zdecr(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zdecr',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async bitcount(key, start, end) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'bitcount',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async decr(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'decr',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async decrby(key, decrement) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'decrby',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async del(key, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'del',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async exists(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'exists',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async expire(key, seconds) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'expire',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async expireat(key, timestamp) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'expireat',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async get(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'get',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async getbit(key, offset) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'getbit',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async getrange(key, start, end) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'getrange',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async getset(key, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'getset',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hdel(key, field, ...fields) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hdel',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hexists(key, field) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hexists',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hget(key, field) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hget',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hgetall(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hgetall',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hincrby(key, field, increment) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hincrby',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hincrbyfloat(key, field, increment) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hincrbyfloat',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hkeys(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hkeys',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hlen(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hlen',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hmget(key, field, ...fields) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hmget',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hmset(key, field, value, ...fieldValues) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hmset',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hset(key, field, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hset',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hsetnx(key, field, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hsetnx',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async hvals(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'hvals',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async incr(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'incr',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async incrby(key, increment) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'incrby',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async incrbyfloat(key, increment) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'incrbyfloat',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async lindex(key, index) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'lindex',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async llen(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'llen',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async lpop(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'lpop',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async lpush(key, value, ...values) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'lpush',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async lpushx(key, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'lpushx',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async lrange(key, start, stop) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'lrange',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async lrem(key, count, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'lrem',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async lset(key, index, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'lset',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async ltrim(key, start, stop) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'ltrim',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async mget(key, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'mget',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async mset(key, value, ...keyAndValue) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'mset',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async persist(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'persist',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async pexpire(key, milliseconds) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'pexpire',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async pexpireat(key, millisecondsTimestamp) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'pexpireat',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async pfadd(key, ...elements) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'pfadd',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async pfcount(key, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'pfcount',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async pfmerge(dest, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'pfmerge',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async psetex(key, milliseconds, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'psetex',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async pttl(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'pttl',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async rpop(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'rpop',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async rpoplpush(source, destination) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'rpoplpush',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async rpush(key, value, ...values) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'rpush',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async rpushx(key, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'rpushx',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async sadd(key, member, ...members) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'sadd',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async scard(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'scard',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async sdiff(key, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'sdiff',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async sdiffstore(destination, key, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'sdiffstore',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async set(key, value, expireMode, expire, setType) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: "set",
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async setbit(key, offset, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'setbit',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async setex(key, seconds, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'setex',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async setnx(key, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'setnx',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async setrange(key, offset, value) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'setrange',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async sinter(key, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'sinter',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async sinterstore(destination, key, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'sinterstore',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async sismember(key, member) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'sismember',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async smembers(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'smembers',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async smove(source, destination, member) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'smove',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async spop(key, count) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'spop',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async srandmember(key, count) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'srandmember',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async srem(key, member, ...members) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'srem',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async strlen(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'strlen',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async sunion(key, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'sunion',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async sunionstore(destination, key, ...keys) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'sunionstore',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async ttl(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'ttl',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async type(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'type',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zadd(key, score, member, ...scoreAndMembers) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zadd',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zcard(key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zcard',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zcount(key, min, max) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zcount',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zincrby(key, increment, member) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zincrby',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zinterstore(destination, numkeys, ...key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zinterstore',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zrange(key, start, stop, withscores) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zrange',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zrangebyscore(key, min, max) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zrangebyscore',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zrank(key, member) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zrank',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zrem(key, member, ...members) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zrem',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zremrangebyrank(key, start, stop) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zremrangebyrank',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zremrangebyscore(key, min, max) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zremrangebyscore',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zrevrange(key, start, stop, withscores) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zrevrange',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zrevrangebyscore(key, max, min) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zrevrangebyscore',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zrevrank(key, member) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zrevrank',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zscore(key, member) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zscore',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    async zunionstore(destination, numKeys, ...key) {
        return await this.invoke(async () => {
            return await (0, request_1.GetRedisRequestInstance)().executeCmd({
                cmd: 'zunionstore',
                args: (0, utils_1.convertToString)(arguments),
                options: this.options,
            });
        });
    }
    setTimeout(options) {
        this.options = options;
        return this;
    }
}
exports.Redis = Redis;
//# sourceMappingURL=redis_impl.js.map