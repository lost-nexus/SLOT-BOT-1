"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileRequest = void 0;
const request_1 = require("../../../adapter/http/request");
const envs_1 = require("../../../common/utils/envs");
const path_1 = require("../../../adapter/http/path");
const option_1 = require("../../../adapter/http/option");
const ctx_1 = require("../../../common/utils/ctx");
class FileRequest {
    constructor() {
        this.host = (0, envs_1.getBaaSServerHost)();
    }
    async preSign(req) {
        let options = (0, option_1.getOptions)(path_1.baasApiKeys.preSign, req.timeout);
        let path = options._reqPath.replace(":ResourceID", (0, ctx_1.getCredentialFromCtx)().resourceID);
        options.searchParams = {
            Name: req.name,
            CheckSumMD5: req.checkSumMD5,
            Size: String(req.size),
        };
        return await (0, request_1.doJsonReq)(path, options);
    }
    async upload(req) {
        let options = (0, option_1.getOptions)(path_1.baasApiKeys.uploadFile, req.timeout);
        let path = req.url;
        options.headers = {
            ...options.headers,
            ...req.additionalHeader,
        };
        options.body = req.content;
        await (0, request_1.doJsonReq)(path, options, { skipHost: true, skipToken: true, skipRespBody: true });
    }
    async download(req) {
        let options = (0, option_1.getOptions)(path_1.baasApiKeys.downloadFile, req.timeout);
        let path = req.url;
        options.responseType = 'buffer';
        const body = await (0, request_1.doJsonReq)(path, options, { skipHost: true, skipToken: true, skipRespBody: true });
        return { content: Buffer.from(body, 'binary') };
    }
    async delete(req) {
        let options = (0, option_1.getOptions)(path_1.baasApiKeys.deleteFile, req.timeout);
        let path = options._reqPath.replace(":ResourceID", (0, ctx_1.getCredentialFromCtx)().resourceID);
        options.json = {
            FileIDs: req.fileIDs,
        };
        await (0, request_1.doJsonReq)(path, options);
    }
    async list(req) {
        let options = (0, option_1.getOptions)(path_1.baasApiKeys.listFile, req.timeout);
        let path = options._reqPath.replace(":ResourceID", (0, ctx_1.getCredentialFromCtx)().resourceID);
        options.json = {
            PaginateFilter: {
                PageSize: req.pageSize,
                PageNumber: req.pageNumber,
            },
            PrefixFilter: req.prefix,
        };
        return await (0, request_1.doJsonReq)(path, options);
    }
    async getFileByID(req) {
        let options = (0, option_1.getOptions)(path_1.baasApiKeys.getFileByID, req.timeout);
        let path = options._reqPath.replace(":ResourceID", (0, ctx_1.getCredentialFromCtx)().resourceID)
            .replace(":FileID", req.fileID);
        return await (0, request_1.doJsonReq)(path, options);
    }
}
exports.FileRequest = FileRequest;
//# sourceMappingURL=file_impl.js.map