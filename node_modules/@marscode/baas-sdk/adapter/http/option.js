"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOptions = exports.HttpOptions = void 0;
const path_1 = require("./path");
const http = require('http');
const https = require('https');
const httpAgentConfig = {
    keepAlive: true,
    keepAliveMsecs: 10000,
    maxSockets: 20,
    maxTotalSockets: 100,
    maxFreeSockets: 20,
};
const httpAgent = new http.Agent({
    keepAlive: httpAgentConfig.keepAlive,
    keepAliveMsecs: httpAgentConfig.keepAliveMsecs,
    maxSockets: httpAgentConfig.maxSockets,
    maxTotalSockets: httpAgentConfig.maxTotalSockets,
    maxFreeSockets: httpAgentConfig.maxFreeSockets,
});
const httpsAgent = new https.Agent({
    keepAlive: httpAgentConfig.keepAlive,
    keepAliveMsecs: httpAgentConfig.keepAliveMsecs,
    maxSockets: httpAgentConfig.maxSockets,
    maxTotalSockets: httpAgentConfig.maxTotalSockets,
    maxFreeSockets: httpAgentConfig.maxFreeSockets,
});
class HttpOptions {
    constructor(method, timeout, agent, headers, reqPath, reqServer, reqMethod, retry = 0) {
        this.method = method;
        this.timeout = timeout;
        this.agent = agent;
        this.headers = headers;
        this._reqPath = reqPath;
        this._reqServer = reqServer;
        this._reqMethod = reqMethod;
        this.retry = retry;
    }
}
exports.HttpOptions = HttpOptions;
function getOptions(apiKey, timeout) {
    let httpConfig = path_1.apiKeyToConfig[apiKey];
    if (!timeout) {
        timeout = httpConfig.getReqTimeout();
    }
    return new HttpOptions(httpConfig.method, {
        'connect': httpConfig.getConnTimeout(),
        'secureConnect': httpConfig.getSecureConnTimeout(),
        'request': timeout,
    }, {
        http: httpAgent,
        https: httpsAgent
    }, {
    // 'X-Jwt-Data': `{"resource_id":"63f9940d33d34b5ba86c5ced70e36cfb","project_id":"dr7e5g4xp6dryj"}`, // TODO 临时 mock，后续传 token
    }, httpConfig.path, httpConfig.getReqServer(), httpConfig.getReqMethod());
}
exports.getOptions = getOptions;
//# sourceMappingURL=option.js.map