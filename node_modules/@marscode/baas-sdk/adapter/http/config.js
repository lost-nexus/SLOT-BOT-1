"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchHttpConfig = exports.DeleteHttpConfig = exports.PutHttpConfig = exports.PostHttpConfig = exports.GetHttpConfig = exports.HttpConfig = void 0;
const envs_1 = require("../../common/utils/envs");
class HttpConfig {
    /**
     * @param method                请求方法
     * @param path                  请求path
     * @param reqTimeoutTccKey      请求超时时间的 tcc key
     * @param reqTimeout            请求超时时间，默认值12s
     * @param connTimeout           连接超时时间，默认值2s
     * @param secureConnTimeout     TLS 连接超时时间，默认值1s
     */
    constructor(method, path, reqTimeoutTccKey, reqTimeout = 10000, connTimeout = 5000, secureConnTimeout = 5000) {
        this.method = method;
        this.path = path;
        this.reqTimeout = reqTimeout;
        this.reqTimeoutTccKey = reqTimeoutTccKey;
        this.connTimeout = connTimeout;
        this.connTimeoutTccKey = 'http_connect_timeout';
        this.secureConnTimeout = secureConnTimeout;
        this.secureConnTimeoutTccKey = 'http_secure_connect_timeout';
    }
    /**
     * 获取请求超时时间
     *
     * @returns {number|*}
     */
    getReqTimeout() {
        const timeout = (0, envs_1.getBaaSApiTimeout)(this.reqTimeoutTccKey);
        if (timeout > 0) {
            return timeout;
        }
        return this.reqTimeout;
    }
    /**
     * 获取连接超时时间
     *
     * @returns {number|*}
     */
    getConnTimeout() {
        return this.connTimeout;
    }
    /**
     * 获取TLS连接超时时间
     *
     * @returns {number|*}
     */
    getSecureConnTimeout() {
        return this.secureConnTimeout;
    }
    /**
     * 获取请求的服务，如 openapi 或 faasinfra
     *
     * @returns {*}
     */
    getReqServer() {
        return this.reqTimeoutTccKey.split(':')[0];
    }
    /**
     * 获取请求方法
     *
     * @returns {*}
     */
    getReqMethod() {
        return this.reqTimeoutTccKey.split(':')[1];
    }
}
exports.HttpConfig = HttpConfig;
class GetHttpConfig extends HttpConfig {
    constructor(path, reqTimeoutTccKey, reqTimeout = 12000, connTimeout = 5000) {
        super('GET', path, reqTimeoutTccKey, reqTimeout, connTimeout);
    }
}
exports.GetHttpConfig = GetHttpConfig;
class PostHttpConfig extends HttpConfig {
    constructor(path, reqTimeoutTccKey, reqTimeout = 12000, connTimeout = 5000) {
        super('POST', path, reqTimeoutTccKey, reqTimeout, connTimeout);
    }
}
exports.PostHttpConfig = PostHttpConfig;
class PutHttpConfig extends HttpConfig {
    constructor(path, reqTimeoutTccKey, reqTimeout = 12000, connTimeout = 5000) {
        super('PUT', path, reqTimeoutTccKey, reqTimeout, connTimeout);
    }
}
exports.PutHttpConfig = PutHttpConfig;
class DeleteHttpConfig extends HttpConfig {
    constructor(path, reqTimeoutTccKey, reqTimeout = 12000, connTimeout = 5000) {
        super('DELETE', path, reqTimeoutTccKey, reqTimeout, connTimeout);
    }
}
exports.DeleteHttpConfig = DeleteHttpConfig;
class PatchHttpConfig extends HttpConfig {
    constructor(path, reqTimeoutTccKey, reqTimeout = 12000, connTimeout = 5000) {
        super('PATCH', path, reqTimeoutTccKey, reqTimeout, connTimeout);
    }
}
exports.PatchHttpConfig = PatchHttpConfig;
//# sourceMappingURL=config.js.map