"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.doJsonReq = void 0;
const got_1 = require("got");
const getToken_1 = require("./getToken");
const envs_1 = require("../../common/utils/envs");
const utils_1 = require("../../common/utils/utils");
async function doJsonReq(url, options, reqOption) {
    if (!(reqOption && reqOption.skipToken)) {
        options.headers["X-Baas-Token"] = await (0, getToken_1.getToken)();
    }
    const reqId = (0, utils_1.getRequestID)();
    if (reqId) {
        options.headers["X-Bizide-Request-Id"] = reqId;
        options.headers["X-Request-Id"] = reqId;
    }
    let u;
    if (reqOption && reqOption.skipHost) {
        u = url;
    }
    else {
        u = (0, envs_1.getBaaSServerHost)() + url;
    }
    let opts = { ...options }; // 一定要 copy 一下
    // 发起请求
    const resp = await (0, got_1.default)(u, opts);
    // 处理非 200 情况
    if (resp.statusCode !== 200) {
        throw new Error(`resp.statusCode: ${resp.statusCode}`);
    }
    if (reqOption && reqOption.skipRespBody) {
        return resp.body;
    }
    // 解析 body
    let result;
    try {
        if (typeof resp.body === "string") {
            result = JSON.parse(resp.body);
        }
    }
    catch (e) {
        throw new Error(`parse body failed: ${e.stack}`);
    }
    // 处理异常情况
    if (result && result.ResponseMetadata && result.ResponseMetadata.Error && (result.ResponseMetadata.Error.Code !== "" && result.ResponseMetadata.Error.Code !== "0")) {
        throw new Error(`[${result.ResponseMetadata.Error.Code}] ${result.ResponseMetadata.Error.Message}`);
    }
    return result.Result;
}
exports.doJsonReq = doJsonReq;
//# sourceMappingURL=request.js.map